{ u : [ { USN : "01ECS179", marks : 92 },{ USN : "01ECS180", marks : 90 } ] }

{"2016-20": {"A": {"Aug-Dec": {"UE16CS171": {"ISA1": 92, "teacher": "PCS181"}, "sem": 1}}}}

db.res.insert({"2016-20": {"A": {"Aug-Dec": {"UE16CS171": {"ISA1": 90, "teacher": "PCS181"}, "sem": 1}}}})

db.res.insert({"2016-20": {"A": {"Aug-Dec": {"UE16CS171": {"ISA1": 92, "teacher": "PCS181"}, "sem": 1}}}})


db.result.update({"USN" : 123, "ISA" : 99}, {$set : {"ISA" : 97}})


Json must always have the key in double quotes only

db.result.insert({ USN:"01ECS179", course:[{c_id:"UE16CS170",ISA1:91,ISA2:91},{c_id:"UE16CS171",ISA1:94,ISA2:96}] })

db.documents.update(
  { _id: "iL9hL2hLauoSimtkM", "comments._id": "id1"},
  { $push: { "comments.$.likes": "userID3" }}
);

db.results.insert({ USN:"01ECS179", course:[{c_id:"UE16CS170",ISA1:91,ISA2:91}] })


if(user):
			db.insert(value)
		else:
			st = "course.$."+type_a
			db.update({"USN" : USN, "course.c_id" : c_id}, {"$set":{st : marks }}, upsert=True )

{c_id:"UE16CS177",ISA1:96}

db.results.update({USN : "01ECS179"} , { $push:{"$.course" : {c_id:"UE16CS177",ISA1:96} }})

db.results.find({USN : "01ECS179", "course.teacher" : "PCS181"} )

db.test.aggregate([
    {$match: {"list.a": {$gt:3}}}, // <-- match only the document which have a matching element
    {$project: {
        list: {$filter: {
            input: "$list",
            as: "list",
            cond: {$gt: ["$$list.a", 3]} //<-- filter sub-array based on condition
        }}
    }}
]);

db.results.aggregate([ {$match : {"course.teacher" : "PCS181" }}, {$project : {USN :1,course : {$filter : { input : "$course", as: "course", cond :{$and:[ {$eq : ["$$course.teacher","PCS181"]}, {$eq :["$$course.c_id","UE16CS170"]}] }} }}} ])


{ 
  "u" : {
         "internals" : { "ISA1" : {  "m" : ["marks_a" : 40, "marks_sd" : 10] }, "ISA2" : {  "m" : ["marks_a" : 40, "marks_sd" : 10] }, 
         "Assignment" :  {  "m" : ["marks_a" : 200, "marks_sd" : 20] }} ,
        "externals" : { "ESA" : {"m" : ["marks_a" : 60, "marks_sd" : 40] }, "project" : { "m" : ["marks_a" : 20, "marks_sd" : 20] }  }
       }
}

course:

CBTCH16CS171 

C - course
BTCH - B.tech (degree) 
16 - Batch
CS - Department

USN:

SBTCH16CS181

S - student
BTCH - B.tech 
16 - Batch
CS - Department

Teacher id:

TCS199

T - teacher
CS - department
------------------
Degree - 4 letters
Batch - 2 digits
Department - 2 letters

Pending (in already done):
1) validations (numbers,users,errors)
2) UI
3) optimization(passing parameters)


Why mongo?
No joins - faster - 
all related data together - no need of table to table mapping. relatively less number of sollections based on use case

Teams UI?

Teams Microsoft graph for notification and chats